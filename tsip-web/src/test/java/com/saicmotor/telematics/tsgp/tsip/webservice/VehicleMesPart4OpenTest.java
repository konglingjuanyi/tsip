package com.saicmotor.telematics.tsgp.tsip.webservice;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * Created with IntelliJ IDEA.
 * User: szksr
 * Date: 13-9-11
 * Time: 上午10:21
 * To change this template use File | Settings | File Templates.
 */
public class VehicleMesPart4OpenTest {

    public static void main(String[] args)throws Exception{
        System.out.println(invokePoiDirect("LGBL2AE0XAY084135"));
    }

    public static String invokePoiDirect(String vin) throws Exception{

        HttpURLConnection conn = null;
        ByteArrayOutputStream temp_baos = null;
        try{
            URL url1 = new URL("http://10.91.225.61:80/TAP.Web/services/EventReceiverTSP");
            InputStream is = null;
            conn = (HttpURLConnection)url1.openConnection();
            conn.setRequestProperty("Content-Type","text/xml;charset=utf-8");
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setDoOutput(true);

            StringBuffer sb = new StringBuffer();
            sb.append("<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
            sb.append("	<soap:Header/>");
            sb.append("		<soap:Body>");
            sb.append("			<sendDataRequest xmlns=\"http://saicmotor.com/mce550/tsgp/tsp/msg/v1\">\n" +
                    "         <messageHeader xmlns=\"\">\n" +
                    "            <protocalVersion>16</protocalVersion>\n" +
                    "            <applicationID>811</applicationID>\n" +
                    "            <messageID>1</messageID>\n" +
                    "            <result>0</result>\n" +
                    "<errorMessage>1</errorMessage>\n"+
                    "         </messageHeader>\n" +
                    "         <!--Zero or more repetitions:-->\n" +
                    "         <applicationData xmlns=\"\">\n" +
                    "        <name>signature</name>\n" +
                    "        <value>%s</value>\n" +
                    "      </applicationData>\n" +
                    "      <applicationData xmlns=\"\">\n" +
                    "        <name>nonce</name>\n" +
                    "        <value>%s</value>\n" +
                    "      </applicationData>\n" +
                    "      <applicationData xmlns=\"\">\n" +
                    "        <name>timestamp</name>\n" +
                    "        <value>%s</value>\n" +
                    "      </applicationData>\n" +
                    "      <applicationData xmlns=\"\">\n" +
                    "        <name>from</name>\n" +
                    "        <value>%s</value>\n" +
                    "      </applicationData>\n" +
                    "       <applicationData xmlns=\"\">\n" +
                    "            <name>vin</name>\n" +
                    "            <!--Zero or more repetitions:-->\n" +
                    "            <value>%s</value>\n" +
                    "         </applicationData>\n" +
                    "      </sendDataRequest>\n");
            sb.append("		</soap:Body>");
            sb.append("</soap:Envelope>");

            OutputStream os = conn.getOutputStream();
            String token = "1f9e3c36201a4f269817094a4fa6fccd";
            Date date = new Date();
            String timestamp = String.valueOf(date.getTime());
            String nonce = String.valueOf((int) (Math.random() * 1000000));
            MessageDigest digest = MessageDigest.getInstance("MD5");
            String signature =  UnicodeUtil.bytesToHexString(digest.digest((token + nonce + timestamp).getBytes()), true);
            String from = "1";

            os.write(String.format(sb.toString(),signature,nonce,timestamp,from,vin).getBytes());
            os.close();

            is = conn.getInputStream();
            if(conn.getResponseCode() != 200){
                throw new Exception("调用下发POI服务出错，http返回码: " + conn.getResponseMessage());
            }

            temp_baos = new ByteArrayOutputStream();
            try {
                int c = 0;
                while ((c = is.read()) != -1 ) {
                    if (c != '\n') {
                        temp_baos.write(c);
                    }
                }
            } catch(Exception e) {
                e.printStackTrace();
            }
            is.close();
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            InputStream xmlinput = new ByteArrayInputStream(temp_baos.toByteArray());
            Document doc = builder.parse(xmlinput);


            return parseNoteList(doc);
        }catch (Exception e1){
            e1.printStackTrace();
            return "-1";
        }finally {
            try {
                if (temp_baos != null) {
                    temp_baos.close();
                }
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
            if (conn != null) {
                conn.disconnect();
            }
        }


    }
    public static String parseNoteList(Document document){
        NodeList nodeList = document.getElementsByTagName("messageHeader");
        Element element = (Element)nodeList.item(0);
        String result = element.getElementsByTagName("result").item(0).getFirstChild().getNodeValue();
        String errorMessage = element.getElementsByTagName("errorMessage").item(0).getFirstChild().getNodeValue();

        NodeList nodeList2 = document.getElementsByTagName("applicationData");
        System.out.println(nodeList2.getLength());
//        Element element2 = (Element)nodeList2.item(0);
//        String engerNo = element2.getElementsByTagName("value").item(0).getFirstChild().getNodeValue();
        Map<String ,String > map = new HashMap<String,String>();
        for(int i=0;i<nodeList2.getLength();i++){
            Element element3 = (Element)nodeList2.item(i);
            Element _elementName = (Element) element3.getElementsByTagName("name").item(0);
            if(!_elementName.hasChildNodes()){continue;}
            String name = _elementName.getFirstChild().getNodeValue();
            Element _elementValue = (Element) element3.getElementsByTagName("value").item(0);
            String value = "";
            if(_elementValue.hasChildNodes()){
                value = _elementValue.getFirstChild().getNodeValue();
            }
            System.out.println(name+"--"+value);
            map.put(name,value);
        }

        return result;
    }

}

